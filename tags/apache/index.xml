<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache on imesh.io</title>
    <link>http://imesh.github.io:80/tags/apache/</link>
    <description>Recent content in Apache on imesh.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Dec 2014 18:03:42 +0000</lastBuildDate>
    <atom:link href="http://imesh.github.io:80/tags/apache/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Introduction to Apache Stratos Mock IaaS</title>
      <link>http://imesh.github.io/introduction-to-apache-stratos-mock-iaas/</link>
      <pubDate>Mon, 22 Dec 2014 18:03:42 +0000</pubDate>
      
      <guid>http://imesh.github.io/introduction-to-apache-stratos-mock-iaas/</guid>
      <description>&lt;p&gt;Apache Stratos supports many Infrastructure as a Service (IaaS) platforms; EC2, OpenStack, VCloud, CloudStack, Docker, etc. However setting up an IaaS or purchasing a public IaaS service is an overhead for contributors and people who would like to tryout Stratos; setting up a local IaaS needs considerable amount of hardware resources and purchasing an online IaaS account involves costs. These are some of the major barriers Stratos community had for last year or so for implementing automated integration tests, bringing in new contributors and allowing people to tryout Stratos with less effort.&lt;/p&gt;

&lt;p&gt;Once Stratos introduced Linux Container support with Docker/Kubernetes this problem was solved up to some extent. Nevertheless setting up a Kubernetes cluster also requires several virtual/physical machines and setting up a puppet master (or any other orchestration platform) is an overhead. Very recently when we introduced the Composite Application feature for grouping cartridges this problem became much worse due to the complexity of the logic implemented and the time it took to verify each functionality with above IaaS platforms.&lt;/p&gt;

&lt;p&gt;As a solution to this problem we introduced a Mock IaaS feature which could simulate the basic features that Stratos requires from an IaaS. The below diagram illustrates the component architecture of the Mock IaaS:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://imesh.gunaratne.org/wp-content/uploads/2014/12/Mock-IaaS-Component-Architecture-2.png&#34;&gt;&lt;img src=&#34;http://imesh.gunaratne.org/wp-content/uploads/2014/12/Mock-IaaS-Component-Architecture-2.png&#34; alt=&#34;Mock IaaS Component Architecture-2&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Figure: Mock IaaS Component Architecture&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stratos IaaS Interface&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Stratos provides an abstraction layer for implementing support for Infrastructure as a Service platforms. This is a generic interface that includes following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start an instance&lt;/li&gt;
&lt;li&gt;Send user-data/payload parameters to instances&lt;/li&gt;
&lt;li&gt;Attach network interfaces to instances&lt;/li&gt;
&lt;li&gt;Allocate public IP addresses to network interfaces&lt;/li&gt;
&lt;li&gt;Attach storage (volumes) to instances&lt;/li&gt;
&lt;li&gt;Terminate an instance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In Stratos 4.0.0 release this interface did not include some of the methods for interacting with the IaaS rather those were directly invoked via the jclouds compute service API. With the introduction of the Mock IaaS all the methods required to communicate with the IaaS were moved to the IaaS interface and jclouds specific logic were moved to a separate class called JcloudsIaas. Now this IaaS interface is implemented by the Mock IaaS client and Jclouds IaaS client (JcloudsIaas). Jclouds IaaS client is further extended by EC2, OpenStack, VCloud, CloudStack, Docker providers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How Mock IaaS Works&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mock IaaS service simulates the lifecycle of an instance using a thread. Each instance will have a separate thread which publishes instance status events to message broker and health statistics to Complex Event Processor (CEP). Once a mock member thread is started it will publish Instance Started event to message broker and in several seconds it will publish the Instance Activated event. Thereafter the health statistics publisher will be started. It will read statistics from a singleton health statistics map which is updated by the health statistics generator.&lt;/p&gt;

&lt;p&gt;Health statistics generator updates the health statistics map according to the statistics patterns defined in the Mock IaaS configuration. The following sample Mock IaaS configuration illustrates how these patterns could be defined for different cartridges:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;mock-iaas enabled=&amp;quot;true&amp;quot;&amp;gt;
   &amp;lt;health-statistics&amp;gt;
       &amp;lt;cartridge type=&amp;quot;tomcat&amp;quot;&amp;gt;
           &amp;lt;!-- factor:memory-consumption|load-average|request-in-flight--&amp;gt;
           &amp;lt;!-- mode:loop|continue|stop --&amp;gt;
           &amp;lt;!-- Mode defines the action needs to be taken after the last sample value:
                loop: start from beginning
                continue: continue the last sample value
                stop: stop publishing statistics --&amp;gt;
           &amp;lt;pattern factor=&amp;quot;memory-consumption&amp;quot; mode=&amp;quot;continue&amp;quot;&amp;gt;
               &amp;lt;!-- Sample values --&amp;gt;
               &amp;lt;sampleValues&amp;gt;20,30,40,50,60,70,50,40,30,20&amp;lt;/sampleValues&amp;gt;
               &amp;lt;!-- Duration of each sample value in seconds --&amp;gt;
               &amp;lt;sampleDuration&amp;gt;60&amp;lt;/sampleDuration&amp;gt;
           &amp;lt;/pattern&amp;gt;
           &amp;lt;pattern factor=&amp;quot;load-average&amp;quot; mode=&amp;quot;continue&amp;quot;&amp;gt;
               &amp;lt;!-- Sample values --&amp;gt;
               &amp;lt;sampleValues&amp;gt;20&amp;lt;/sampleValues&amp;gt;
               &amp;lt;!-- Duration of each sample value in seconds --&amp;gt;
               &amp;lt;sampleDuration&amp;gt;60&amp;lt;/sampleDuration&amp;gt;
           &amp;lt;/pattern&amp;gt;
       &amp;lt;/cartridge&amp;gt;
   &amp;lt;/health-statistics&amp;gt;
&amp;lt;/mock-iaas&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the above sample we have defined a health statistics generation pattern for tomcat cartridge. Similarly we can define multiple health statistics generation patterns for different cartridges. Under each cartridge its possible to define three different autoscaling factors: memory-consumption|load-average|request-in-flight. Mock health statistics generator will generate statistics for each factor for the given cartridge and update the central health statistics map. In each pattern mode attribute defines the action that needs to be taken once the last sample value is reached. If this is set to loop, mock health statistics generator will loop back to the first value. If it is set to continue the last sample value will be continued. If it is set to stop, health statistics generation process will be stopped and eventually health statistics publishing process will also stop. Finally the members in that cluster will become faulty.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing A Reverse Proxy Server on Ubuntu with Apache2</title>
      <link>http://imesh.github.io/installing-a-reverse-proxy-server-on-ubuntu-with-apache2/</link>
      <pubDate>Mon, 15 Dec 2014 08:25:54 +0000</pubDate>
      
      <guid>http://imesh.github.io/installing-a-reverse-proxy-server-on-ubuntu-with-apache2/</guid>
      <description>&lt;p&gt;Update package lists:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install Apache2 with mod_proxy:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install libapache2-mod-proxy-html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install libxml2 module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install libxml2-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add following configuration to the /etc/apache2/apache2.conf file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LoadModule  proxy_module         /usr/lib/apache2/modules/mod_proxy.so
LoadModule  proxy_http_module    /usr/lib/apache2/modules/mod_proxy_http.so
LoadModule  headers_module       /usr/lib/apache2/modules/mod_headers.so
LoadModule  deflate_module       /usr/lib/apache2/modules/mod_deflate.so
LoadFile    /usr/lib/x86_64-linux-gnu/libxml2.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add a sample reverse proxy configuration to the same file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ProxyPass /imesh http://imesh.gunaratne.org
ProxyPassReverse /imesh http://imesh.gunaratne.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart Apache2:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/apache2 restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;References:
&lt;a href=&#34;http://httpd.apache.org/docs/2.2/mod/mod_proxy.html&#34;&gt;http://httpd.apache.org/docs/2.2/mod/mod_proxy.html&lt;/a&gt;
&lt;a href=&#34;https://abhirama.wordpress.com/2008/11/03/apache-mod_proxy-in-ubuntu/&#34;&gt;https://abhirama.wordpress.com/2008/11/03/apache-mod_proxy-in-ubuntu/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Install Stratos in One Go</title>
      <link>http://imesh.github.io/install-stratos-in-one-go/</link>
      <pubDate>Sun, 22 Jun 2014 19:32:40 +0000</pubDate>
      
      <guid>http://imesh.github.io/install-stratos-in-one-go/</guid>
      <description>

&lt;p&gt;Apache Stratos 4.0.0 &lt;a href=&#34;https://cwiki.apache.org/confluence/display/STRATOS/4.0.0+Installation+Guide&#34;&gt;installation process&lt;/a&gt; has series of manual steps; installing prerequisites, downloading source and binary packages, installing and configuring puppet master, configuring Stratos products, etc. I think it is a waste of time to do all these steps over an over again when setting up Stratos development or demo environments.&lt;/p&gt;

&lt;p&gt;As a solution to this, I implemented a script to automate the complete Stratos installation process by filling the gaps in between:&lt;/p&gt;

&lt;h4 id=&#34;prerequisites:44b86b14737d76c995bb84192bc26c97&#34;&gt;Prerequisites:&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;An Ubuntu 12.04 64bit host&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#34;steps-to-follow:44b86b14737d76c995bb84192bc26c97&#34;&gt;Steps to follow:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Take a git clone of the below git repository:
&lt;code&gt;git clone https://github.com/imesh/stratos-dev-stack.git&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Update install.sh with host private IP and IaaS configuration parameters:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;host_private_ip=&amp;quot;&amp;quot;
ec2_identity=&amp;quot;identity&amp;quot;
ec2_credential=&amp;quot;credential&amp;quot;
ec2_keypair_name=&amp;quot;keypair-name&amp;quot;
ec2_owner_id=&amp;quot;owner-id&amp;quot;
ec2_availability_zone=&amp;quot;availability-zone&amp;quot;
ec2_security_groups=&amp;quot;security-groups&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Grant install.sh executable access:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;chmod +x install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Run install.sh with root permissions:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;sudo ./install.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will download and install Stratos source/binary packages, Java, MySQL connector, ActiveMQ, puppet master and configure all of them with default configuration settings. Once the process is complete it will start MySQL server, Active MQ and Stratos.&lt;/p&gt;

&lt;p&gt;Stratos dashboard URL could be found at the below link:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://&amp;lt;hostname&amp;gt;:9443/console
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to Stratos installation we need to create a base cartridge image. This will act as the base image for all the cartridges. To start with spawn another instance of Ubuntu 12.04 64bit image and run the below script with root permissions. In this process we do not need to do any configurations, it will download and install all prerequisites and puppet agent:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /tmp
wget https://gist.githubusercontent.com/imesh/f8fd7a40d89dd4b60898/raw/48087c76b853632cf12474ba909bc355fe861666/cartridge-creator.sh 
chmod +x cartridge-creator.sh
sudo ./cartridge-creator.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During this process it will prompt you to enter the puppet master IP, puppet master hostname, and service name, for those please enter the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Puppet master IP: IP of the Stratos host
Puppet master hostname: puppet.stratos.org
Service name: default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once cartridge creation process is completed create an image from the running VM instance. Thereafter find the image id of the created image and use it as the cartridge image id in each &lt;a href=&#34;https://cwiki.apache.org/confluence/display/STRATOS/4.0.0+Sample+Cartridge+Definition&#34;&gt;cartridge definition&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Advance Load Balancing Capabilities in Apache Stratos (incubating) 4</title>
      <link>http://imesh.github.io/advance-load-balancing-capabilities-in-apache-stratos-incubating-4/</link>
      <pubDate>Wed, 05 Feb 2014 22:38:00 +0000</pubDate>
      
      <guid>http://imesh.github.io/advance-load-balancing-capabilities-in-apache-stratos-incubating-4/</guid>
      <description>

&lt;p&gt;In Apache Stratos (incubating) 4 architecture there are three different ways to configure load balancers for services. The idea of this functionality is to provide more optimized load balancing capabilities in a single PaaS deployment as required by different services.&lt;/p&gt;

&lt;h3 id=&#34;1-shared-scalable-load-balancing:d65c476a376f9af57d7c8254d3a97a5a&#34;&gt;1. Shared Scalable Load Balancing&lt;/h3&gt;

&lt;p&gt;In this load balancing mode a service would get access to a scalable load balancer/cluster shared among multiple services. The resulting load balancing solution may consume less IaaS resources and will be cost efficient for the service provider.&lt;/p&gt;

&lt;h3 id=&#34;2-dedicated-scalable-load-balancing-for-services:d65c476a376f9af57d7c8254d3a97a5a&#34;&gt;2. Dedicated Scalable Load Balancing for Services&lt;/h3&gt;

&lt;p&gt;If a service requires a high through put and low response time in load balancing it could request a dedicated scalable load balancer/cluster for its service. This load balancer/cluster will not be shared among any other services and will only be used with the given service. As a result it will use more IaaS resources than option 1 and may cost more.&lt;/p&gt;

&lt;h3 id=&#34;3-non-scalable-load-balancing:d65c476a376f9af57d7c8254d3a97a5a&#34;&gt;3. Non Scalable Load Balancing&lt;/h3&gt;

&lt;p&gt;If the service provider does not need a scalable load balancing solution, they could either configure the auto-scaling policies to spawn one load balancer instance or go with a non scalable load balancer/cluster. In non scalable load balancing mode Stratos will not manage the load balancer instances rather it will provide required topology information via the message broker to configure its topology in runtime.&lt;/p&gt;

&lt;p&gt;More importantly in each load balancing mode either Apache Stratos Load Balancer or any other load balancer with Apache Stratos Load Balancer Extension API could be used. I will be writing another article on the load balancer extension API and its usage soon.&lt;/p&gt;

&lt;p&gt;The above load balancing modes could be configured in cartridge definition and load balancer configuration as follows:&lt;/p&gt;

&lt;h3 id=&#34;cartridge-definition-configuration:d65c476a376f9af57d7c8254d3a97a5a&#34;&gt;Cartridge Definition Configuration&lt;/h3&gt;

&lt;h4 id=&#34;c1-cartridge-1-service-1-configured-with-shared-scalable-load-balancing:d65c476a376f9af57d7c8254d3a97a5a&#34;&gt;C1: Cartridge 1/Service 1 Configured with Shared Scalable Load Balancing:&lt;/h4&gt;

&lt;p&gt;Here we set the default.load.balancer property to true in load balancer section in cartridge definition. As a result all the subscriptions made to this service will join to the default shared load balancer.&lt;/p&gt;

&lt;p&gt;According to the current implementation there will be only one default load balancer instance/cluster for a given Stratos deployment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;cartridgeDefinitionBean&amp;quot;: {
        ...

        &amp;quot;loadBalancer&amp;quot;: {
            &amp;quot;property&amp;quot;: {
                &amp;quot;name&amp;quot;: &amp;quot;default.load.balancer&amp;quot;,
                &amp;quot;value&amp;quot;: &amp;quot;true&amp;quot;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c2-cartridge-2-service-2-configured-with-dedicated-scalable-load-balancing:d65c476a376f9af57d7c8254d3a97a5a&#34;&gt;C2: Cartridge 2/Service 2 Configured with Dedicated Scalable Load Balancing:&lt;/h4&gt;

&lt;p&gt;Here we set the &amp;ldquo;service.aware.load.balancer&amp;rdquo; property to true in load balancer section. As a result there will be a dedicated load balancer instance/cluster spawned for this service and all the subscriptions made to this service will join to this dedicated load balancer.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;cartridgeDefinitionBean&amp;quot;: {
        ...

        &amp;quot;loadBalancer&amp;quot;: {
            &amp;quot;property&amp;quot;: {
                &amp;quot;name&amp;quot;: &amp;quot;service.aware.load.balancer&amp;quot;,
                &amp;quot;value&amp;quot;: &amp;quot;true&amp;quot;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;c3-cartridge-3-service-3-configured-with-non-scalable-load-balancing:d65c476a376f9af57d7c8254d3a97a5a&#34;&gt;C3: Cartridge 3/Service 3 Configured with Non Scalable Load Balancing:&lt;/h4&gt;

&lt;p&gt;Here we set the &amp;ldquo;no.load.balancer&amp;rdquo; property to true in load balancer section. As a result there will be no load balancers spawned for this service. However we could configure a static load balancer instance to serve the members spawned for the service subscriptions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;cartridgeDefinitionBean&amp;quot;: {
        ...

        &amp;quot;loadBalancer&amp;quot;: {
            &amp;quot;property&amp;quot;: {
                &amp;quot;name&amp;quot;: &amp;quot;no.load.balancer&amp;quot;,
                &amp;quot;value&amp;quot;: &amp;quot;true&amp;quot;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the above cartridge configuration is done we need to configure the load balancer to identify the services which it needs to serve. This is accomplished by adding the load balancer cluster id to each member which it needs to join. Once a new member is spawned in a service cluster, Stratos Manager adds the relevant load balancer cluster id to the member instance. Subsequently when the member activated event is received by the load balancer it checks the member&amp;rsquo;s load balancer cluster id against its value. If it matches then the relevant member will get joined to that load balancer/cluster.&lt;/p&gt;

&lt;h4 id=&#34;load-balancer-configuration-for-c1-c2:d65c476a376f9af57d7c8254d3a97a5a&#34;&gt;Load Balancer Configuration for C1 &amp;amp; C2&lt;/h4&gt;

&lt;p&gt;Once a load balancer/cluster is spawned for above C1 and C2 options, the cartridge agent will update the topology-member-filter property in loadbalancer.conf value to its own load balancer cluster id at the start up. This process will make sure that only members with the same LB Cluster ID will join to this load balancer/cluster.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; # Topology member filter
 # Provide load balancer cluster ids in a comma separated list to filter incoming topology events if
 # topology_event_listener_enabled is set to true. This functionality could be used for allowing members
 # to join a given load balancer cluster.
 topology-member-filter: lb-cluster-id=lb-cluster-id1;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;load-balancer-configuration-for-c3:d65c476a376f9af57d7c8254d3a97a5a&#34;&gt;Load Balancer Configuration for C3&lt;/h4&gt;

&lt;p&gt;For non-scalable load balancers we could manually start a Stratos load balancer/cluster by commenting out the topology-member-filter property. As a result all the members in the Stratos deployment will get joined to this non-scalable load balancer/cluster.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Apache Stratos (Incubating) Initial Release with Openstack</title>
      <link>http://imesh.github.io/getting-started-with-apache-stratos-incubating-initial-release-with-openstack/</link>
      <pubDate>Fri, 27 Sep 2013 09:50:00 +0000</pubDate>
      
      <guid>http://imesh.github.io/getting-started-with-apache-stratos-incubating-initial-release-with-openstack/</guid>
      <description>

&lt;p&gt;Apache Stratos (incubating) is now ready with it’s initial release. A new Git branch has been created for this release with the name “3.0.0-incubating-x”. Please note that &amp;ldquo;x&amp;rdquo; refers to the RC version. Please refer the project wiki for detailed information about this release. To start with, first we need to get the binary distribution of Apache Stratos. We could either build it from source or download the officially released files from svn.&lt;/p&gt;

&lt;h4 id=&#34;how-to-build-from-source:ca22749167d775a2e3747beccf928b4d&#34;&gt;How to Build From Source:&lt;/h4&gt;

&lt;p&gt;You could follow the below steps to build the binary distribution from source:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://git-wip-us.apache.org/repos/asf/incubator-stratos.git
git checkout 3.0.0-incubation-x
cd incubator-stratos
mvn clean install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This process will checkout the source files from 3.0.0-incubating-x branch and build using maven. Once the build is completed you could find the binary packages at the following locations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;incubator-stratos/products/stratos-cli/distribution/target/apache-stratos-cli-3.0.0-incubating-x.zip
incubator-stratos/products/cloud-controller/modules/distribution/target/apache-stratos-cc-3.0.0-incubating-x.zip
incubator-stratos/products/stratos-controller/modules/distribution/target/apache-stratos-sc-3.0.0-incubating-x.zip
incubator-stratos/products/elb/modules/distribution/target/apache-stratos-elb-3.0.0-incubating-x.zip
incubator-stratos/products/stratos-agent/distribution/target/apache-stratos-agent-3.0.0-incubating-x.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&#34;download-binary-distributions:ca22749167d775a2e3747beccf928b4d&#34;&gt;Download Binary Distributions:&lt;/h4&gt;

&lt;p&gt;Please find the official binary packages at the blow location. Select the latest RC version and download the files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;https://dist.apache.org/repos/dist/dev/incubator/stratos/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&#34;download-openstack-cartridge-images:ca22749167d775a2e3747beccf928b4d&#34;&gt;Download Openstack Cartridge Images:&lt;/h4&gt;

&lt;p&gt;Once the binary distribution is in place we need to prepare Stratos cartridge images according to the preferred Infrastructure as a Service (IaaS) platform. Here I have created Apache Tomcat, PHP and MySQL cartridge images for Openstack. You could download those image files from the following URLs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;stratos-3.0.0-incubating-tomcat-cartridge.img.zip
stratos-3.0.0-incubating-php-cartridge.img.zip
stratos-3.0.0-incubating-mysql-cartridge.img.zip
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&#34;upload-cartridge-images-to-openstack:ca22749167d775a2e3747beccf928b4d&#34;&gt;Upload Cartridge Images to Openstack:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;The glance client could be used for uploading the above image files to an Openstack instance. Execute the below command to install glance client:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install python-novaclient python-glanceclient swift
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Then download EC2 credentials from Openstack Dashboard and source the openrc.sh file:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;source /openrc.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Once cartridge images are downloaded execute the below command to upload them via glance. Here the glance client will use the above EC2 credentials to connect to the Openstack instance.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;glance image-create --name=&amp;quot;stratos-3.0.0-incubating--tomcat-cartridge&amp;quot; --is-public=true --container-format=ami --disk-format=ami &amp;lt; stratos-3.0.0-incubating-tomcat-cartridge.img
glance image-create --name=&amp;quot;stratos-3.0.0-incubating-mysql-cartridge&amp;quot; --is-public=true --container-format=ami --disk-format=ami &amp;lt; stratos-3.0.0-incubating-mysql-cartridge.img
glance image-create --name=&amp;quot;stratos-3.0.0-incubating-php-cartridge&amp;quot; --is-public=true --container-format=ami --disk-format=ami &amp;lt; stratos-3.0.0-incubating-php-cartridge.img
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&#34;prepare-stratos-installer:ca22749167d775a2e3747beccf928b4d&#34;&gt;Prepare Stratos Installer&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Now take a copy of the Stratos installer from it’s source repository’s tools folder:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;git clone https://git-wip-us.apache.org/repos/asf/incubator-stratos.git
git checkout 3.0.0-incubation-x
cd incubator-stratos/tools/stratos-installer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This folder contains scripts for installing Apache Stratos on a given environment. First configure the required settings in setup.conf file found under conf directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vi conf/setup.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Configure general information section with the below parameter values:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;export setup_path= #Folder path containing stratos_setup
export stratos_pack_path= #Folder path containing stratos packages 
export stratos_path= #Folder which stratos will be installed
export JAVA_HOME= #Java home path
export hostip=&amp;quot;&amp;quot; #Machine ip on which setup script run
export host_user=&amp;quot;&amp;quot; #A host user account for stratos.
export mysql_connector_jar=$stratos_pack_path/&amp;quot;mysql-connector-java-5.1.25.jar&amp;quot; #mysql connector jar file name
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Configure Openstack section with following parameter values. One important thing to note here is that openstack_provider_enabled property enables Openstack IaaS in Stratos. Therefore in this specific scenario you may need to set ec2_provider_enabled property to false.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;openstack:ca22749167d775a2e3747beccf928b4d&#34;&gt;Openstack&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;export openstack_provider_enabled=true
export openstack_identity=&amp;quot;stratos:stratos&amp;quot; #Openstack project name:Openstack login user
export openstack_credential=&amp;quot;password&amp;quot; #Openstack login password
export openstack_tenant=&amp;quot;stratos&amp;quot; #Openstack project name
export openstack_jclouds_endpoint=&amp;quot;http://hostname:5000/v2.0&amp;quot; #Openstack Keystone URL
export openstack_scaleup_order=2
export openstack_scaledown_order=3
export openstack_keypair_name=&amp;quot;&amp;quot; #Create a new keypair and add the name here
export nova_region=&amp;quot;RegionOne&amp;quot; #Openstack region used for spawning cartridge instances
export openstack_instance_type_tiny=&amp;quot;RegionOne\/1&amp;quot;
export openstack_instance_type_small=&amp;quot;RegionOne\/2&amp;quot;
export openstack_security_groups=&amp;quot;security-groups&amp;quot;
export openstack_php_cartridge_image_id=&amp;quot;&amp;quot; #Openstack PHP Cartridge Image ID
export openstack_mysql_cartridge_image_id=&amp;quot;&amp;quot; #Openstack MySQL Cartridge Image ID
export openstack_tomcat_cartridge_image_id=&amp;quot;&amp;quot; #Openstack Apache Tomcat Cartridge Image ID
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Install following pre-requisite software:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;java -jdk1.6.x   
Git
facter   
zip
mysql-server
Gitblits
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;   
5. Download WSO2 Message Broker (MB) binary distribution from &lt;a href=&#34;http://wso2.com/products/message-broker/&#34;&gt;http://wso2.com/products/message-broker/&lt;/a&gt; and copy it to stratos-pack-path. Here you could use any preferred message broker product which supports AMQP.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Extract MB distribution in stratos-path and set it&amp;rsquo;s port offset in repository/conf/carbon.xml to 5. This will set the actual MB port to 5677.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following entries to the /etc/hosts file:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ip-address&amp;gt; stratos.apache.org        # stratos domain
&amp;lt;ip-address&amp;gt; mb.stratos.apache.org     # message broker hostname
&amp;lt;ip-address&amp;gt; cc.stratos.apache.org     # cloud controller hostname
&amp;lt;ip-address&amp;gt; sc.stratos.apache.org     # stratos controller hostname
&amp;lt;ip-address&amp;gt; elb.stratos.apache.org    # elastic load balancer hostname
&amp;lt;ip-address&amp;gt; agent.stratos.apache.org  # agent hostname
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;install-apache-stratos:ca22749167d775a2e3747beccf928b4d&#34;&gt;Install Apache Stratos&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Once the above configuration is done, execute the below command to install Stratos at the given path (stratos_path):&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;sudo ./setup.sh -p &amp;quot;elb sc cc agent&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;At the end of the installation it will prompt to start all the servers in the background, you could say no to this question and start the server manually so that you have more control over the initial Stratos environment. More importantly if any configuration errors has occurred, you should be able to rectify them more easily.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;sh $stratos_path/&amp;lt;module&amp;gt;/bin/stratos.sh 
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Now carefully watch the logs of Elastic Load Balancer (ELB), Stratos Controller (SC), Cloud Controller (CC) and Stratos Agent. Those logs could be found at the following location of each module. Each should have started successfully without any problems.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;$stratos_path/&amp;lt;module&amp;gt;/repository/logs/wso2carbon.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h4 id=&#34;verify-apache-stratos-installation:ca22749167d775a2e3747beccf928b4d&#34;&gt;Verify Apache Stratos Installation&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Now login to Stratos Controller using admin/admin and create a tenant user at the below URL:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;https://sc.stratos.apache.org:9445/carbon
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Login again to Stratos Controller using the tenant user and subscribe to a cartridge. Here you might need to use a Git repository to point to an application to be deployed on Stratos PaaS. This process should spin up a new instance of relevant cartridge and update the status on cartridge subscription list. Once the cartridge is ready you could test the deployed application by using its URL.&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>