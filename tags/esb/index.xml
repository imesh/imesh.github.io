<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Esb on imesh.io</title>
    <link>http://imesh.github.io:80/tags/esb/</link>
    <description>Recent content in Esb on imesh.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Nov 2014 12:57:55 +0000</lastBuildDate>
    <atom:link href="http://imesh.github.io:80/tags/esb/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to Activate/Deactivate Message Processors in WSO2 ESB with MBeans</title>
      <link>http://imesh.github.io/how-to-activatedeactivate-message-processors-in-wso2-esb-with-mbeans/</link>
      <pubDate>Thu, 27 Nov 2014 12:57:55 +0000</pubDate>
      
      <guid>http://imesh.github.io/how-to-activatedeactivate-message-processors-in-wso2-esb-with-mbeans/</guid>
      <description>

&lt;h2 id=&#34;what-is-a-message-processor:77974a968c24b1b07dd6068f0134deda&#34;&gt;What is a Message Processor?&lt;/h2&gt;

&lt;p&gt;WSO2 ESB provides message processors for delivering messages that have been temporarily stored in a message store. This approach is useful for serving traffic to back-end services that can only accept messages at a given rate, whereas incoming traffic to the ESB arrives at different rates [1]. Please refer [2] for sample use cases of message processors.&lt;/p&gt;

&lt;h2 id=&#34;how-to-implement-a-mbeans-client:77974a968c24b1b07dd6068f0134deda&#34;&gt;How to Implement a MBeans Client?&lt;/h2&gt;

&lt;p&gt;The below sample code demonstrates how to talk to the JMX endpoint of the ESB and actiavate and deactivate a message processor. Here update the JMX URL and the bean definition accordingly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import javax.management.MBeanServerConnection;
import javax.management.ObjectName;
import javax.management.remote.JMXConnector;
import javax.management.remote.JMXConnectorFactory;
import javax.management.remote.JMXServiceURL;
import java.util.HashMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        try {
            Map&amp;lt;String, Object&amp;gt; env = new HashMap&amp;lt;String, Object&amp;gt;();
            String[] credentials = new String[]{&amp;quot;admin&amp;quot;, &amp;quot;admin&amp;quot;};
            env.put(&amp;quot;jmx.remote.credentials&amp;quot;, credentials);

            String url = &amp;quot;service:jmx:rmi://localhost:11111/jndi/rmi://localhost:9999/jmxrmi&amp;quot;;
            JMXServiceURL target = new JMXServiceURL(url);
            JMXConnector connector = JMXConnectorFactory.connect(target, env);
            MBeanServerConnection remote = connector.getMBeanServerConnection();

            String beanDef = &amp;quot;org.apache.synapse:Type=Message Forwarding Processor view,Name=MessageForwardingProcessor&amp;quot;;
            ObjectName bean = new ObjectName(beanDef);

            remote.invoke(bean, &amp;quot;activate&amp;quot;, null, null);
            connector.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1] &lt;a href=&#34;https://docs.wso2.com/display/ESB481/Message+Processors&#34;&gt;https://docs.wso2.com/display/ESB481/Message+Processors&lt;/a&gt;
[2] &lt;a href=&#34;https://docs.wso2.com/display/ESB481/Store+and+Forward+Using+JMS+Message+Stores&#34;&gt;https://docs.wso2.com/display/ESB481/Store+and+Forward+Using+JMS+Message+Stores&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Re-Writing Query Parameters in WSO2 ESB</title>
      <link>http://imesh.github.io/re-writing-query-parameters-in-wso2-esb/</link>
      <pubDate>Wed, 27 Aug 2014 16:28:09 +0000</pubDate>
      
      <guid>http://imesh.github.io/re-writing-query-parameters-in-wso2-esb/</guid>
      <description>&lt;p&gt;The following code sample shows how to re-write a query parameter in an URL in WSO2 ESB. This technique might be useful when dynamically handling endpoint URLs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;property name=&amp;quot;URL&amp;quot; value=&amp;quot;http://host:8280?p1=abc&amp;amp;amp;p2=qwe&amp;quot;/&amp;gt;
&amp;lt;filter source=&amp;quot;$ctx:URL&amp;quot; regex=&amp;quot;.*format=.*&amp;quot;&amp;gt;
    &amp;lt;then&amp;gt;
         &amp;lt;!-- format query parameter found in URL, replace it --&amp;gt;
         &amp;lt;property name=&amp;quot;URL_UPDATED&amp;quot;
                   expression=&amp;quot;replace($ctx:URL, &#39;format=([^&amp;amp;amp;]*)&#39;, &#39;format=xml&#39;)&amp;quot;/&amp;gt;
    &amp;lt;/then&amp;gt;
    &amp;lt;else&amp;gt;
         &amp;lt;!-- format query parameter not found in URL, add it --&amp;gt;
         &amp;lt;property name=&amp;quot;URL_UPDATED&amp;quot; 
                   expression=&amp;quot;concat($ctx:URL, &#39;&amp;amp;amp;format=xml&#39;)&amp;quot;/&amp;gt;
    &amp;lt;/else&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;log level=&amp;quot;custom&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;-- original --&amp;quot; expression=&amp;quot;$ctx:URL&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;-- updated --&amp;quot; expression=&amp;quot;$ctx:URL_UPDATED&amp;quot;/&amp;gt;
&amp;lt;/log&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Implementing Split Aggregate Pattern in ESB</title>
      <link>http://imesh.github.io/implementing-split-aggregate-pattern-in-esb/</link>
      <pubDate>Sun, 15 Jun 2014 18:30:48 +0000</pubDate>
      
      <guid>http://imesh.github.io/implementing-split-aggregate-pattern-in-esb/</guid>
      <description>

&lt;p&gt;Split Aggregate is an &lt;a href=&#34;http://www.eaipatterns.com/&#34;&gt;Enterprise Integration Pattern&lt;/a&gt; (EIP) which could be implemented in an ESB in scenarios where the same backend service needs to be invoked with different payloads. This will avoid the need of making multiple service calls to backend services and eventually reduce the service invocation round trip time.&lt;/p&gt;

&lt;p&gt;In this articleÂ I have designed a sample mediation flow in WSO2 ESB, by using the Iterate and Aggregate mediators to demonstrate the usage of Split Aggregate patten.&lt;/p&gt;

&lt;h3 id=&#34;in-mediation-flow:94ce61deccc4ede7f2e1a3c4000ccac2&#34;&gt;In Mediation Flow&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://imesh.gunaratne.org/wp-content/uploads/2014/06/ESB-Iterate-Aggregate-In-Flow.png&#34;&gt;&lt;img src=&#34;http://imesh.gunaratne.org/wp-content/uploads/2014/06/ESB-Iterate-Aggregate-In-Flow.png&#34; alt=&#34;ESB-Iterate-Aggregate-In-Flow&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;According to the above diagram when a message is received by an API or Proxy Service in the ESB it will be delegated to the In Sequence.&lt;/li&gt;
&lt;li&gt;Here we could validate the incoming request and implement error handling logic. What I have done is I have introduced a Response Sequence to generate an error response if the incoming request is not valid. At the same time I re-use the Response Sequence as the last step in the message out flow.&lt;/li&gt;
&lt;li&gt;Here my approach is to generate a common response message in Response Sequence which will have attributes to detect an error.&lt;/li&gt;
&lt;li&gt;The best part of this approach is that the API/Proxy Service will return a response in both successful and error situations.&lt;/li&gt;
&lt;li&gt;As the next step the iterate mediator will split the message using the XPath expression given and send each sub message to the endpoint.&lt;/li&gt;
&lt;li&gt;At this point iterate mediator set the total sub message count in the message context:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;org.apache.synapse.mediators.eip.splitter.IterateMediator (Synapse 2.1.2-wso2v5):
   private MessageContext getIteratedMessage() {
      ...
      newCtx.setProperty(
      EIPConstants.MESSAGE_SEQUENCE + &amp;quot;.&amp;quot; + id,
      msgNumber + EIPConstants.MESSAGE_SEQUENCE_DELEMITER + msgCount);
      ...
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Then I have configured the endpoint timeout settings to trigger the fault sequence if a timeout occurs.&lt;/li&gt;
&lt;li&gt;Here we need to consider the timeout value of the actual backend service which the endpoint is pointing to.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;out-mediation-flow:94ce61deccc4ede7f2e1a3c4000ccac2&#34;&gt;Out Mediation Flow&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://imesh.gunaratne.org/wp-content/uploads/2014/06/ESB-Iterate-Aggregate-Out-Flow.png&#34;&gt;&lt;img src=&#34;http://imesh.gunaratne.org/wp-content/uploads/2014/06/ESB-Iterate-Aggregate-Out-Flow.png&#34; alt=&#34;ESB-Iterate-Aggregate-Out-Flow&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All successful responses will trigger the out sequence and all fault messages will trigger the fault sequence (according to the API/Proxy Service configuration).&lt;/li&gt;
&lt;li&gt;In addition any messages that may get timeout by the endpoint will trigger the fault sequence.&lt;/li&gt;
&lt;li&gt;Both out sequence and fault sequence will generate a sub result block in the same format as show in below sample response. Since both blocks are in the same format the aggregate mediator will be able to aggregate them without any problem.&lt;/li&gt;
&lt;li&gt;Important: In this approach we will generate a sub result block for all the sub messages sent to the endpoint, even if a timeout occurs in one sub message.&lt;/li&gt;
&lt;li&gt;Then the Aggregate Mediator will wait until responses to all the sub messages are received:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;org.apache.synapse.mediators.eip.aggregator.Aggregate (Synapse 2.1.2-wso2v5):
   public synchronised boolean isComplete() {
   ...
      String[] msgSequence = prop.toString().split(
      EIPConstants.MESSAGE_SEQUENCE_DELEMITER);
      int total = Integer.parseInt(msgSequence[1]);
      ...
      if (messages.size() &amp;amp;gt;= total) {
         synLog.traceOrDebug(&amp;quot;Aggregation complete&amp;quot;);
         return true;
      }
      ...
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To do this we should not define a timeout in complete condition in aggregate mediator, rather the following could be defined:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;aggregate&amp;gt; 
    &amp;lt;completeCondition&amp;gt; 
        &amp;lt;messageCount/&amp;gt; 
    &amp;lt;/completeCondition&amp;gt; 
    &amp;lt;onComplete xmlns:m0=&amp;quot;http://services.samples&amp;quot; expression=&amp;quot;//m0:getQuoteResponse&amp;quot;&amp;gt; 
        &amp;lt;send/&amp;gt; 
    &amp;lt;/onComplete&amp;gt; 
&amp;lt;/aggregate&amp;gt; 
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Once the aggregated response message is reached at the Response Sequence it will be sent back to the client.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>