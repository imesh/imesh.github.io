<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wso2 on imesh.io</title>
    <link>http://imesh.github.io:80/tags/wso2/</link>
    <description>Recent content in Wso2 on imesh.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Nov 2014 12:57:55 +0000</lastBuildDate>
    <atom:link href="http://imesh.github.io:80/tags/wso2/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to Activate/Deactivate Message Processors in WSO2 ESB with MBeans</title>
      <link>http://imesh.github.io/how-to-activatedeactivate-message-processors-in-wso2-esb-with-mbeans/</link>
      <pubDate>Thu, 27 Nov 2014 12:57:55 +0000</pubDate>
      
      <guid>http://imesh.github.io/how-to-activatedeactivate-message-processors-in-wso2-esb-with-mbeans/</guid>
      <description>

&lt;h2 id=&#34;what-is-a-message-processor:77974a968c24b1b07dd6068f0134deda&#34;&gt;What is a Message Processor?&lt;/h2&gt;

&lt;p&gt;WSO2 ESB provides message processors for delivering messages that have been temporarily stored in a message store. This approach is useful for serving traffic to back-end services that can only accept messages at a given rate, whereas incoming traffic to the ESB arrives at different rates [1]. Please refer [2] for sample use cases of message processors.&lt;/p&gt;

&lt;h2 id=&#34;how-to-implement-a-mbeans-client:77974a968c24b1b07dd6068f0134deda&#34;&gt;How to Implement a MBeans Client?&lt;/h2&gt;

&lt;p&gt;The below sample code demonstrates how to talk to the JMX endpoint of the ESB and actiavate and deactivate a message processor. Here update the JMX URL and the bean definition accordingly.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import javax.management.MBeanServerConnection;
import javax.management.ObjectName;
import javax.management.remote.JMXConnector;
import javax.management.remote.JMXConnectorFactory;
import javax.management.remote.JMXServiceURL;
import java.util.HashMap;
import java.util.Map;

public class Main {
    public static void main(String[] args) {
        try {
            Map&amp;lt;String, Object&amp;gt; env = new HashMap&amp;lt;String, Object&amp;gt;();
            String[] credentials = new String[]{&amp;quot;admin&amp;quot;, &amp;quot;admin&amp;quot;};
            env.put(&amp;quot;jmx.remote.credentials&amp;quot;, credentials);

            String url = &amp;quot;service:jmx:rmi://localhost:11111/jndi/rmi://localhost:9999/jmxrmi&amp;quot;;
            JMXServiceURL target = new JMXServiceURL(url);
            JMXConnector connector = JMXConnectorFactory.connect(target, env);
            MBeanServerConnection remote = connector.getMBeanServerConnection();

            String beanDef = &amp;quot;org.apache.synapse:Type=Message Forwarding Processor view,Name=MessageForwardingProcessor&amp;quot;;
            ObjectName bean = new ObjectName(beanDef);

            remote.invoke(bean, &amp;quot;activate&amp;quot;, null, null);
            connector.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[1] &lt;a href=&#34;https://docs.wso2.com/display/ESB481/Message+Processors&#34;&gt;https://docs.wso2.com/display/ESB481/Message+Processors&lt;/a&gt;
[2] &lt;a href=&#34;https://docs.wso2.com/display/ESB481/Store+and+Forward+Using+JMS+Message+Stores&#34;&gt;https://docs.wso2.com/display/ESB481/Store+and+Forward+Using+JMS+Message+Stores&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Re-Writing Query Parameters in WSO2 ESB</title>
      <link>http://imesh.github.io/re-writing-query-parameters-in-wso2-esb/</link>
      <pubDate>Wed, 27 Aug 2014 16:28:09 +0000</pubDate>
      
      <guid>http://imesh.github.io/re-writing-query-parameters-in-wso2-esb/</guid>
      <description>&lt;p&gt;The following code sample shows how to re-write a query parameter in an URL in WSO2 ESB. This technique might be useful when dynamically handling endpoint URLs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;property name=&amp;quot;URL&amp;quot; value=&amp;quot;http://host:8280?p1=abc&amp;amp;amp;p2=qwe&amp;quot;/&amp;gt;
&amp;lt;filter source=&amp;quot;$ctx:URL&amp;quot; regex=&amp;quot;.*format=.*&amp;quot;&amp;gt;
    &amp;lt;then&amp;gt;
         &amp;lt;!-- format query parameter found in URL, replace it --&amp;gt;
         &amp;lt;property name=&amp;quot;URL_UPDATED&amp;quot;
                   expression=&amp;quot;replace($ctx:URL, &#39;format=([^&amp;amp;amp;]*)&#39;, &#39;format=xml&#39;)&amp;quot;/&amp;gt;
    &amp;lt;/then&amp;gt;
    &amp;lt;else&amp;gt;
         &amp;lt;!-- format query parameter not found in URL, add it --&amp;gt;
         &amp;lt;property name=&amp;quot;URL_UPDATED&amp;quot; 
                   expression=&amp;quot;concat($ctx:URL, &#39;&amp;amp;amp;format=xml&#39;)&amp;quot;/&amp;gt;
    &amp;lt;/else&amp;gt;
&amp;lt;/filter&amp;gt;
&amp;lt;log level=&amp;quot;custom&amp;quot;&amp;gt;
    &amp;lt;property name=&amp;quot;-- original --&amp;quot; expression=&amp;quot;$ctx:URL&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;-- updated --&amp;quot; expression=&amp;quot;$ctx:URL_UPDATED&amp;quot;/&amp;gt;
&amp;lt;/log&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Implementing Split Aggregate Pattern in ESB</title>
      <link>http://imesh.github.io/implementing-split-aggregate-pattern-in-esb/</link>
      <pubDate>Sun, 15 Jun 2014 18:30:48 +0000</pubDate>
      
      <guid>http://imesh.github.io/implementing-split-aggregate-pattern-in-esb/</guid>
      <description>

&lt;p&gt;Split Aggregate is an &lt;a href=&#34;http://www.eaipatterns.com/&#34;&gt;Enterprise Integration Pattern&lt;/a&gt; (EIP) which could be implemented in an ESB in scenarios where the same backend service needs to be invoked with different payloads. This will avoid the need of making multiple service calls to backend services and eventually reduce the service invocation round trip time.&lt;/p&gt;

&lt;p&gt;In this articleÂ I have designed a sample mediation flow in WSO2 ESB, by using the Iterate and Aggregate mediators to demonstrate the usage of Split Aggregate patten.&lt;/p&gt;

&lt;h3 id=&#34;in-mediation-flow:94ce61deccc4ede7f2e1a3c4000ccac2&#34;&gt;In Mediation Flow&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://imesh.gunaratne.org/wp-content/uploads/2014/06/ESB-Iterate-Aggregate-In-Flow.png&#34;&gt;&lt;img src=&#34;http://imesh.gunaratne.org/wp-content/uploads/2014/06/ESB-Iterate-Aggregate-In-Flow.png&#34; alt=&#34;ESB-Iterate-Aggregate-In-Flow&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;According to the above diagram when a message is received by an API or Proxy Service in the ESB it will be delegated to the In Sequence.&lt;/li&gt;
&lt;li&gt;Here we could validate the incoming request and implement error handling logic. What I have done is I have introduced a Response Sequence to generate an error response if the incoming request is not valid. At the same time I re-use the Response Sequence as the last step in the message out flow.&lt;/li&gt;
&lt;li&gt;Here my approach is to generate a common response message in Response Sequence which will have attributes to detect an error.&lt;/li&gt;
&lt;li&gt;The best part of this approach is that the API/Proxy Service will return a response in both successful and error situations.&lt;/li&gt;
&lt;li&gt;As the next step the iterate mediator will split the message using the XPath expression given and send each sub message to the endpoint.&lt;/li&gt;
&lt;li&gt;At this point iterate mediator set the total sub message count in the message context:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;org.apache.synapse.mediators.eip.splitter.IterateMediator (Synapse 2.1.2-wso2v5):
   private MessageContext getIteratedMessage() {
      ...
      newCtx.setProperty(
      EIPConstants.MESSAGE_SEQUENCE + &amp;quot;.&amp;quot; + id,
      msgNumber + EIPConstants.MESSAGE_SEQUENCE_DELEMITER + msgCount);
      ...
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Then I have configured the endpoint timeout settings to trigger the fault sequence if a timeout occurs.&lt;/li&gt;
&lt;li&gt;Here we need to consider the timeout value of the actual backend service which the endpoint is pointing to.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;out-mediation-flow:94ce61deccc4ede7f2e1a3c4000ccac2&#34;&gt;Out Mediation Flow&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://imesh.gunaratne.org/wp-content/uploads/2014/06/ESB-Iterate-Aggregate-Out-Flow.png&#34;&gt;&lt;img src=&#34;http://imesh.gunaratne.org/wp-content/uploads/2014/06/ESB-Iterate-Aggregate-Out-Flow.png&#34; alt=&#34;ESB-Iterate-Aggregate-Out-Flow&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All successful responses will trigger the out sequence and all fault messages will trigger the fault sequence (according to the API/Proxy Service configuration).&lt;/li&gt;
&lt;li&gt;In addition any messages that may get timeout by the endpoint will trigger the fault sequence.&lt;/li&gt;
&lt;li&gt;Both out sequence and fault sequence will generate a sub result block in the same format as show in below sample response. Since both blocks are in the same format the aggregate mediator will be able to aggregate them without any problem.&lt;/li&gt;
&lt;li&gt;Important: In this approach we will generate a sub result block for all the sub messages sent to the endpoint, even if a timeout occurs in one sub message.&lt;/li&gt;
&lt;li&gt;Then the Aggregate Mediator will wait until responses to all the sub messages are received:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;org.apache.synapse.mediators.eip.aggregator.Aggregate (Synapse 2.1.2-wso2v5):
   public synchronised boolean isComplete() {
   ...
      String[] msgSequence = prop.toString().split(
      EIPConstants.MESSAGE_SEQUENCE_DELEMITER);
      int total = Integer.parseInt(msgSequence[1]);
      ...
      if (messages.size() &amp;amp;gt;= total) {
         synLog.traceOrDebug(&amp;quot;Aggregation complete&amp;quot;);
         return true;
      }
      ...
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To do this we should not define a timeout in complete condition in aggregate mediator, rather the following could be defined:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;aggregate&amp;gt; 
    &amp;lt;completeCondition&amp;gt; 
        &amp;lt;messageCount/&amp;gt; 
    &amp;lt;/completeCondition&amp;gt; 
    &amp;lt;onComplete xmlns:m0=&amp;quot;http://services.samples&amp;quot; expression=&amp;quot;//m0:getQuoteResponse&amp;quot;&amp;gt; 
        &amp;lt;send/&amp;gt; 
    &amp;lt;/onComplete&amp;gt; 
&amp;lt;/aggregate&amp;gt; 
&amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Once the aggregated response message is reached at the Response Sequence it will be sent back to the client.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Exposing WSO2 Identity Server Admin Services as REST APIs</title>
      <link>http://imesh.github.io/exposing-wso2-identity-server-admin-services-as-rest-apis/</link>
      <pubDate>Thu, 15 May 2014 13:36:00 +0000</pubDate>
      
      <guid>http://imesh.github.io/exposing-wso2-identity-server-admin-services-as-rest-apis/</guid>
      <description>&lt;p&gt;WSO2 Identity server 4.5.0 does not provide REST APIs for accessing its administrative services out of the box. However we could use WSO2 ESB to convert SOAP based administrative services to REST. Please follow the below steps to do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download WSO2 ESB 4.8.1 and IS 4.5.0.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extract ESB distribution and set the offset to 1 in carbon.xml file.
&lt;code&gt;&amp;lt;offset&amp;gt;1&amp;lt;/offset&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extract IS distribution and set theÂ HideAdminServiceWSDLsÂ property to false in carbon.xml file. This will expose administrative services WSDLs.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;HideAdminServiceWSDLs&amp;gt;false&amp;lt;/HideAdminServiceWSDLs&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now start IS with OSGi console enabled:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;sh &amp;lt;IS-HOME&amp;gt;/bin/wso2server.sh -DosgiConsole&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Enter listAdminServices command in OSGi console and retrieve the list of administrative services available and their WSDLs.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In this article I will use listAllUsers() method available in UserAdmin service to demonstrate how to convert SOAP based services to REST. UserAdmin service WSDL could be found at:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;https://localhost:9443/services/UserAdmin?wsdl&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now create an in sequence in ESB with the following content:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[code lang=&amp;ldquo;xml&amp;rdquo; escaped=&amp;ldquo;true&amp;rdquo;]
&lt;sequence xmlns=&#34;http://ws.apache.org/ns/synapse&#34; name=&#34;ListUsersInSeq&#34;&gt;
    &lt;payloadFactory media-type=&#34;xml&#34;&gt;
        &lt;format&gt;
            &lt;xsd:listAllUsers xmlns:xsd=&#34;http://org.apache.axis2/xsd&#34;&gt;
                &lt;a href=&#34;xsd:filter&#34;&gt;xsd:filter&lt;/a&gt;$1&lt;a href=&#34;http://imesh.github.io:80/xsd:filter&#34;&gt;/xsd:filter&lt;/a&gt;
                &lt;a href=&#34;xsd:limit&#34;&gt;xsd:limit&lt;/a&gt;$2&lt;a href=&#34;http://imesh.github.io:80/xsd:limit&#34;&gt;/xsd:limit&lt;/a&gt;
            &lt;a href=&#34;http://imesh.github.io:80/xsd:listAllUsers&#34;&gt;/xsd:listAllUsers&lt;/a&gt;
        &lt;/format&gt;
        &lt;args&gt;
            &lt;arg xmlns:m0=&#34;http://services.samples&#34; evaluator=&#34;xml&#34; expression=&#34;$url:filter&#34;/&gt;
            &lt;arg xmlns:m0=&#34;http://services.samples&#34; evaluator=&#34;xml&#34; expression=&#34;$url:limit&#34;/&gt;
        &lt;/args&gt;
    &lt;/payloadFactory&gt;
    &lt;property xmlns:ns=&#34;http://org.apache.synapse/xsd&#34; name=&#34;Authorization&#34; 
              expression=&#34;fn:concat(&#39;Basic &#39;, base64Encode(&#39;admin:admin&#39;))&#34; scope=&#34;transport&#34; type=&#34;STRING&#34;/&gt;
    &lt;property name=&#34;SOAPAction&#34; value=&#34;urn:listAllUsers&#34; scope=&#34;transport&#34; type=&#34;STRING&#34;/&gt;
    &lt;property name=&#34;HTTP_METHOD&#34; value=&#34;POST&#34; scope=&#34;axis2&#34; type=&#34;STRING&#34;/&gt;
    &lt;log level=&#34;full&#34;/&gt;
    &lt;send&gt;
        &lt;endpoint&gt;
            &lt;address uri=&#34;https://localhost:9443/services/UserAdmin&#34; format=&#34;soap12&#34;/&gt;
        &lt;/endpoint&gt;
    &lt;/send&gt;
&lt;/sequence&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
8. Create an out sequence with the following content:

[code lang=&amp;quot;xml&amp;quot; escaped=&amp;quot;true&amp;quot;]
&amp;lt;sequence xmlns=&amp;quot;http://ws.apache.org/ns/synapse&amp;quot; name=&amp;quot;ListUsersOutSeq&amp;quot;&amp;gt;
    &amp;lt;log level=&amp;quot;full&amp;quot;/&amp;gt;
    &amp;lt;property name=&amp;quot;messageType&amp;quot; value=&amp;quot;application/json&amp;quot; scope=&amp;quot;axis2&amp;quot; type=&amp;quot;STRING&amp;quot;/&amp;gt;
    &amp;lt;send/&amp;gt;
&amp;lt;/sequence&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Create an API with the following content:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[code lang=&amp;ldquo;xml&amp;rdquo; escaped=&amp;ldquo;true&amp;rdquo;]
&lt;api xmlns=&#34;http://ws.apache.org/ns/synapse&#34; name=&#34;listUsers&#34; context=&#34;/listUsers&#34;&gt;
    &lt;resource methods=&#34;GET&#34; inSequence=&#34;ListUsersInSeq&#34; outSequence=&#34;ListUsersOutSeq&#34;&gt;
        &lt;faultSequence/&gt;
    &lt;/resource&gt;
&lt;/api&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
10. Send a HTTP GET request to the listUsers API:

Request:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;curl -v &lt;a href=&#34;http://localhost:8281/listUsers?filter=*&amp;amp;limit=10&#34;&gt;http://localhost:8281/listUsers?filter=*&amp;amp;limit=10&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Response:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{&amp;ldquo;listAllUsersResponse&amp;rdquo;:
   {&amp;ldquo;return&amp;rdquo;:[ {&amp;ldquo;@type&amp;rdquo;:&amp;ldquo;ax2629:FlaggedName&amp;rdquo;,&amp;ldquo;dn&amp;rdquo;:{&amp;ldquo;@nil&amp;rdquo;:&amp;ldquo;true&amp;rdquo;},&amp;ldquo;domainName&amp;rdquo;:{&amp;ldquo;@nil&amp;rdquo;:&amp;ldquo;true&amp;rdquo;},&amp;ldquo;editable&amp;rdquo;:true,
&amp;ldquo;itemDisplayName&amp;rdquo;:&amp;ldquo;admin&amp;rdquo;,&amp;ldquo;itemName&amp;rdquo;:&amp;ldquo;admin&amp;rdquo;,&amp;ldquo;readOnly&amp;rdquo;:false,&amp;ldquo;roleType&amp;rdquo;:{&amp;ldquo;@nil&amp;rdquo;:&amp;ldquo;true&amp;rdquo;},&amp;ldquo;selected&amp;rdquo;:false,&amp;ldquo;shared&amp;rdquo;:false},
                       {&amp;ldquo;@type&amp;rdquo;:&amp;ldquo;ax2629:FlaggedName&amp;rdquo;,&amp;ldquo;dn&amp;rdquo;:{&amp;ldquo;@nil&amp;rdquo;:&amp;ldquo;true&amp;rdquo;},&amp;ldquo;domainName&amp;rdquo;:{&amp;ldquo;@nil&amp;rdquo;:&amp;ldquo;true&amp;rdquo;},&amp;ldquo;editable&amp;rdquo;:false,
&amp;ldquo;itemDisplayName&amp;rdquo;:null,&amp;ldquo;itemName&amp;rdquo;:false,&amp;ldquo;readOnly&amp;rdquo;:false,&amp;ldquo;roleType&amp;rdquo;:{&amp;ldquo;@nil&amp;rdquo;:&amp;ldquo;true&amp;rdquo;},&amp;ldquo;selected&amp;rdquo;:false,&amp;ldquo;shared&amp;rdquo;:false}
]}}
````&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>WSO2 CApp Deployment Verification Process</title>
      <link>http://imesh.github.io/wso2-capp-deployment-verification-process-2/</link>
      <pubDate>Mon, 16 Sep 2013 06:02:09 +0000</pubDate>
      
      <guid>http://imesh.github.io/wso2-capp-deployment-verification-process-2/</guid>
      <description>&lt;p&gt;WSO2 introduced a new Carbon Application (CApp) deployment verification process in Carbon 4.2.0 release. This might be useful for environments where applicaiton deployment process is automated via DevOps such as Jenkins.&lt;/p&gt;

&lt;p&gt;In Carbon 4.2.0 release CApps are considered as atomic units which consists of a collection of artifacts that provides set of services for a specific requirement. Since the applications are considered atomic, if one of the artifacts of an application does not get deployed properly, that application will considered as not deployed. Which means either the all the artifacts of a CApp will get deployed or none.&lt;/p&gt;

&lt;p&gt;Following steps could be tried out to test this functionality with WSO2 Application Server (AS) 5.2.0:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download AS 5.2.0 binary distribution and extract to a desired location.&lt;/li&gt;
&lt;li&gt;Set the following property to false in repository/conf/carbon.xml
&lt;code&gt;&amp;lt;hideadminservicewsdls&amp;gt;false&amp;lt;/hideadminservicewsdls&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This will expose the Administrative Services WSDLs and we may need to access the following services:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1. https://host-name:9443/services/AuthenticationAdmin?wsdl
2. https://host-name:9443/services/ApplicationAdmin?wsdl
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Invoke the login() method at &lt;a href=&#34;https://host-name:9443/services/AuthenticationAdmin&#34;&gt;https://host-name:9443/services/AuthenticationAdmin&lt;/a&gt; service. This method will return a Session ID on the HTTP response header and it may look like below:
JSESSIONID=45A850DF90CA6A009AD875CF5EF61460&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Invoke listAllApplications() method at &lt;a href=&#34;https://host-name:9443/services/ApplicationAdmin&#34;&gt;https://host-name:9443/services/ApplicationAdmin&lt;/a&gt; service while passing the Session ID on the HTTP request header as an Cookie. This request may look like below:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;â Request â
POST https://host-name:9443/services/ApplicationAdmin.ApplicationAdminHttpsSoap11Endpoint/ HTTP/1.1
Accept-Encoding: gzip,deflate
Content-Type: text/xml;charset=UTF-8
SOAPAction: âurn:listAllApplicationsâ
COOKIE: JSESSIONID=45A850DF90CA6A009AD875CF5EF61460
Content-Length: 238
Host: host-name:9443
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.1 (java 1.5)

â Response â
&amp;lt;soapenv:Envelope xmlns:soapenv=âhttp://schemas.xmlsoap.org/soap/envelope/â&amp;gt;
   &amp;lt;soapenv:Body&amp;gt;
      &amp;lt;ns:listAllApplicationsResponse 
          xmlns:ns=âhttp://mgt.application.carbon.wso2.orgâ 
          xmlns:ax27=âhttp://mgt.application.carbon.wso2.org/xsdâ&amp;gt;
         &amp;lt;ns:return&amp;gt;HelloCar_1.0.0&amp;lt;/ns:return&amp;gt;
      &amp;lt;/ns:listAllApplicationsResponse&amp;gt;
   &amp;lt;/soapenv:Body&amp;gt;
&amp;lt;/soapenv:Envelope&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the response body you could see the available CApps listed.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now invoke getAppData() method at &lt;a href=&#34;https://host-name:9443/services/ApplicationAdmin&#34;&gt;https://host-name:9443/services/ApplicationAdmin&lt;/a&gt; service with the required CApp name and Session ID:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;â Request â
POST https://host-name:9443/services/ApplicationAdmin.ApplicationAdminHttpsSoap11Endpoint/ HTTP/1.1
Accept-Encoding: gzip,deflate
Content-Type: text/xml;charset=UTF-8
SOAPAction: âurn:getAppDataâ
COOKIE: JSESSIONID=45A850DF90CA6A009AD875CF5EF61460
Content-Length: 329
Host: host-name:9443
Connection: Keep-Alive
User-Agent: Apache-HttpClient/4.1.1 (java 1.5)

â Response â
&amp;lt;soapenv:Envelope xmlns:soapenv=âhttp://schemas.xmlsoap.org/soap/envelope/â&amp;gt;
   &amp;lt;soapenv:Body&amp;gt;
      &amp;lt;ns:getAppDataResponse xmlns:ns=âhttp://mgt.application.carbon.wso2.orgâ&amp;gt;
         &amp;lt;ns:return xsi:type=âax27:ApplicationMetadataâ 
                    xmlns:ax27=âhttp://mgt.application.carbon.wso2.org/xsdâ 
                    xmlns:xsi=âhttp://www.w3.org/2001/XMLSchema-instanceâ&amp;gt;
            &amp;lt;ax27:appName&amp;gt;HelloCar&amp;lt;/ax27:appName&amp;gt;
            &amp;lt;ax27:appVersion&amp;gt;1.0.0&amp;lt;/ax27:appVersion&amp;gt;
            &amp;lt;ax27:artifactsDeploymentStatus xsi:type=âax27:ArtifactDeploymentStatusâ&amp;gt;
               &amp;lt;ax27:artifactName&amp;gt;HelloCarService&amp;lt;/ax27:artifactName&amp;gt;
               &amp;lt;ax27:deploymentStatus&amp;gt;Deployed&amp;lt;/ax27:deploymentStatus&amp;gt;
            &amp;lt;/ax27:artifactsDeploymentStatus&amp;gt;
         &amp;lt;/ns:return&amp;gt;
      &amp;lt;/ns:getAppDataResponse&amp;gt;
   &amp;lt;/soapenv:Body&amp;gt;
&amp;lt;/soapenv:Envelope&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here on the response body you could see the deployment status of the CApps and their artifacts.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>