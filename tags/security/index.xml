<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on imesh.io</title>
    <link>http://imesh.github.io:80/tags/security/</link>
    <description>Recent content in Security on imesh.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 May 2014 13:36:00 +0000</lastBuildDate>
    <atom:link href="http://imesh.github.io:80/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Exposing WSO2 Identity Server Admin Services as REST APIs</title>
      <link>http://imesh.github.io/exposing-wso2-identity-server-admin-services-as-rest-apis/</link>
      <pubDate>Thu, 15 May 2014 13:36:00 +0000</pubDate>
      
      <guid>http://imesh.github.io/exposing-wso2-identity-server-admin-services-as-rest-apis/</guid>
      <description>&lt;p&gt;WSO2 Identity server 4.5.0 does not provide REST APIs for accessing its administrative services out of the box. However we could use WSO2 ESB to convert SOAP based administrative services to REST. Please follow the below steps to do this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Download WSO2 ESB 4.8.1 and IS 4.5.0.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extract ESB distribution and set the offset to 1 in carbon.xml file.
[code] &lt;offset&gt;1&lt;/offset&gt; [/code]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Extract IS distribution and set the HideAdminServiceWSDLs property to false in carbon.xml file. This will expose administrative services WSDLs.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[code] &lt;HideAdminServiceWSDLs&gt;false&lt;/HideAdminServiceWSDLs&gt; [/code]&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now start IS with OSGi console enabled:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[code] sh &lt;IS-HOME&gt;/bin/wso2server.sh -DosgiConsole [/code]&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Enter listAdminServices command in OSGi console and retrieve the list of administrative services available and their WSDLs.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In this article I will use listAllUsers() method available in UserAdmin service to demonstrate how to convert SOAP based services to REST. UserAdmin service WSDL could be found at:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[code] &lt;a href=&#34;https://localhost:9443/services/UserAdmin?wsdl&#34;&gt;https://localhost:9443/services/UserAdmin?wsdl&lt;/a&gt; [/code]&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Now create an in sequence in ESB with the following content:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[code lang=&amp;ldquo;xml&amp;rdquo; escaped=&amp;ldquo;true&amp;rdquo;]
&lt;sequence xmlns=&#34;http://ws.apache.org/ns/synapse&#34; name=&#34;ListUsersInSeq&#34;&gt;
    &lt;payloadFactory media-type=&#34;xml&#34;&gt;
        &lt;format&gt;
            &lt;xsd:listAllUsers xmlns:xsd=&#34;http://org.apache.axis2/xsd&#34;&gt;
                &lt;a href=&#34;xsd:filter&#34;&gt;xsd:filter&lt;/a&gt;$1&lt;a href=&#34;http://imesh.github.io:80/xsd:filter&#34;&gt;/xsd:filter&lt;/a&gt;
                &lt;a href=&#34;xsd:limit&#34;&gt;xsd:limit&lt;/a&gt;$2&lt;a href=&#34;http://imesh.github.io:80/xsd:limit&#34;&gt;/xsd:limit&lt;/a&gt;
            &lt;a href=&#34;http://imesh.github.io:80/xsd:listAllUsers&#34;&gt;/xsd:listAllUsers&lt;/a&gt;
        &lt;/format&gt;
        &lt;args&gt;
            &lt;arg xmlns:m0=&#34;http://services.samples&#34; evaluator=&#34;xml&#34; expression=&#34;$url:filter&#34;/&gt;
            &lt;arg xmlns:m0=&#34;http://services.samples&#34; evaluator=&#34;xml&#34; expression=&#34;$url:limit&#34;/&gt;
        &lt;/args&gt;
    &lt;/payloadFactory&gt;
    &lt;property xmlns:ns=&#34;http://org.apache.synapse/xsd&#34; name=&#34;Authorization&#34; 
              expression=&#34;fn:concat(&#39;Basic &#39;, base64Encode(&#39;admin:admin&#39;))&#34; scope=&#34;transport&#34; type=&#34;STRING&#34;/&gt;
    &lt;property name=&#34;SOAPAction&#34; value=&#34;urn:listAllUsers&#34; scope=&#34;transport&#34; type=&#34;STRING&#34;/&gt;
    &lt;property name=&#34;HTTP_METHOD&#34; value=&#34;POST&#34; scope=&#34;axis2&#34; type=&#34;STRING&#34;/&gt;
    &lt;log level=&#34;full&#34;/&gt;
    &lt;send&gt;
        &lt;endpoint&gt;
            &lt;address uri=&#34;https://localhost:9443/services/UserAdmin&#34; format=&#34;soap12&#34;/&gt;
        &lt;/endpoint&gt;
    &lt;/send&gt;
&lt;/sequence&gt;
[/code]&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an out sequence with the following content:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[code lang=&amp;ldquo;xml&amp;rdquo; escaped=&amp;ldquo;true&amp;rdquo;]
&lt;sequence xmlns=&#34;http://ws.apache.org/ns/synapse&#34; name=&#34;ListUsersOutSeq&#34;&gt;
    &lt;log level=&#34;full&#34;/&gt;
    &lt;property name=&#34;messageType&#34; value=&#34;application/json&#34; scope=&#34;axis2&#34; type=&#34;STRING&#34;/&gt;
    &lt;send/&gt;
&lt;/sequence&gt;
[/code]&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an API with the following content:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;[code lang=&amp;ldquo;xml&amp;rdquo; escaped=&amp;ldquo;true&amp;rdquo;]
&lt;api xmlns=&#34;http://ws.apache.org/ns/synapse&#34; name=&#34;listUsers&#34; context=&#34;/listUsers&#34;&gt;
    &lt;resource methods=&#34;GET&#34; inSequence=&#34;ListUsersInSeq&#34; outSequence=&#34;ListUsersOutSeq&#34;&gt;
        &lt;faultSequence/&gt;
    &lt;/resource&gt;
&lt;/api&gt;
[/code]&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Send a HTTP GET request to the listUsers API:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Request:
[code]
curl -v &lt;a href=&#34;http://localhost:8281/listUsers?filter=*&amp;amp;limit=10&#34;&gt;http://localhost:8281/listUsers?filter=*&amp;amp;limit=10&lt;/a&gt;
[/code]&lt;/p&gt;

&lt;p&gt;Response:
[code]
{&amp;ldquo;listAllUsersResponse&amp;rdquo;:
   {&amp;ldquo;return&amp;rdquo;:[ {&amp;ldquo;@type&amp;rdquo;:&amp;ldquo;ax2629:FlaggedName&amp;rdquo;,&amp;ldquo;dn&amp;rdquo;:{&amp;ldquo;@nil&amp;rdquo;:&amp;ldquo;true&amp;rdquo;},&amp;ldquo;domainName&amp;rdquo;:{&amp;ldquo;@nil&amp;rdquo;:&amp;ldquo;true&amp;rdquo;},&amp;ldquo;editable&amp;rdquo;:true,
&amp;ldquo;itemDisplayName&amp;rdquo;:&amp;ldquo;admin&amp;rdquo;,&amp;ldquo;itemName&amp;rdquo;:&amp;ldquo;admin&amp;rdquo;,&amp;ldquo;readOnly&amp;rdquo;:false,&amp;ldquo;roleType&amp;rdquo;:{&amp;ldquo;@nil&amp;rdquo;:&amp;ldquo;true&amp;rdquo;},&amp;ldquo;selected&amp;rdquo;:false,&amp;ldquo;shared&amp;rdquo;:false},
                       {&amp;ldquo;@type&amp;rdquo;:&amp;ldquo;ax2629:FlaggedName&amp;rdquo;,&amp;ldquo;dn&amp;rdquo;:{&amp;ldquo;@nil&amp;rdquo;:&amp;ldquo;true&amp;rdquo;},&amp;ldquo;domainName&amp;rdquo;:{&amp;ldquo;@nil&amp;rdquo;:&amp;ldquo;true&amp;rdquo;},&amp;ldquo;editable&amp;rdquo;:false,
&amp;ldquo;itemDisplayName&amp;rdquo;:null,&amp;ldquo;itemName&amp;rdquo;:false,&amp;ldquo;readOnly&amp;rdquo;:false,&amp;ldquo;roleType&amp;rdquo;:{&amp;ldquo;@nil&amp;rdquo;:&amp;ldquo;true&amp;rdquo;},&amp;ldquo;selected&amp;rdquo;:false,&amp;ldquo;shared&amp;rdquo;:false}
]}}
[/code]&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Quick-Guide for Generating a PGP Key</title>
      <link>http://imesh.github.io/a-quick-guide-for-generating-a-pgp-key/</link>
      <pubDate>Tue, 22 Apr 2014 04:27:26 +0000</pubDate>
      
      <guid>http://imesh.github.io/a-quick-guide-for-generating-a-pgp-key/</guid>
      <description>

&lt;h4 id=&#34;1-generate-a-self-signed-key:a55d05ad15c95240857fdd7bd1629bb7&#34;&gt;1. Generate a Self Signed Key&lt;/h4&gt;

&lt;p&gt;[code] $ gpg &amp;ndash;gen-key [/code]&lt;/p&gt;

&lt;p&gt;[code]
gpg (GnuPG) 1.4.10; Copyright &amp;copy; 2008 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.&lt;/p&gt;

&lt;p&gt;Please select what kind of key you want:
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)
Your selection? 1
[/code]&lt;/p&gt;

&lt;p&gt;[code]
RSA keys may be between 1024 and 4096 bits long.
What keysize do you want? (2048) 4096
Requested keysize is 4096 bits
Please specify how long the key should be valid.
         0 = key does not expire
      &lt;n&gt;  = key expires in n days
      &lt;n&gt;w = key expires in n weeks
      &lt;n&gt;m = key expires in n months
      &lt;n&gt;y = key expires in n years
Key is valid for? (0)
Key does not expire at all
Is this correct? (y/N) y
[/code]&lt;/p&gt;

&lt;p&gt;[code]
You need a user ID to identify your key; the software constructs the user ID
from the Real Name, Comment and Email Address in this form:
    &amp;ldquo;First-Name Last-Name &lt;a href=&#34;mailto:your-id@domain.org&#34;&gt;your-id@domain.org&lt;/a&gt;&amp;ldquo;&lt;/p&gt;

&lt;p&gt;Real name: Robert First-Name Last-Name
Email address: your-id@apache.org
Comment: CODE SIGNING KEY
You selected this USER-ID:
    &amp;ldquo;First-Name Last-Name (CODE SIGNING KEY) &lt;a href=&#34;mailto:your-id@apache.org&#34;&gt;your-id@apache.org&lt;/a&gt;&amp;ldquo;
[/code]&lt;/p&gt;

&lt;p&gt;[code]
Change (N)ame, &amp;copy;omment, (E)mail or (O)kay/(Q)uit? O
You need a Passphrase to protect your secret key.
[/code]&lt;/p&gt;

&lt;h4 id=&#34;2-check-that-sha1-is-avoided:a55d05ad15c95240857fdd7bd1629bb7&#34;&gt;2. Check that SHA1 is Avoided&lt;/h4&gt;

&lt;p&gt;[code] $ gpg &amp;ndash;edit-key KEY-ID [/code]&lt;/p&gt;

&lt;p&gt;[code]
gpg (GnuPG) 1.4.10; Copyright &amp;copy; 2008 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.&lt;/p&gt;

&lt;p&gt;Secret key is available.&lt;/p&gt;

&lt;p&gt;pub  4096R/&lt;KEY-ID&gt;  created: 2010-02-16  expires: never       usage: SC&lt;br /&gt;
                     trust: ultimate      validity: ultimate
sub  4096R/436E0F7C  created: 2010-02-16  expires: never       usage: E&lt;br /&gt;
ultimate (1). First-Name Last-Name (CODE SIGNING KEY) &lt;a href=&#34;mailto:user-id@apache.org&#34;&gt;user-id@apache.org&lt;/a&gt;
[/code]&lt;/p&gt;

&lt;p&gt;[code] Command&amp;gt; showpref [/code]&lt;/p&gt;

&lt;p&gt;[code]
ultimate (1). First-Name Last-Name (CODE SIGNING KEY)
&lt;a href=&#34;mailto:user-id@apache.org&#34;&gt;user-id@apache.org&lt;/a&gt;
     Cipher: AES256, AES192, AES, CAST5, 3DES
     Digest: SHA512, SHA384, SHA256, SHA224, SHA1
     Compression: ZLIB, BZIP2, ZIP, Uncompressed
     Features: MDC, Keyserver no-modify
[/code]&lt;/p&gt;

&lt;p&gt;Here SHA1 should appear last in the Digest section. If not enter below command to correct the order:&lt;/p&gt;

&lt;p&gt;[code] Command&amp;gt; setpref SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed [/code]&lt;/p&gt;

&lt;h4 id=&#34;3-export-the-private-key:a55d05ad15c95240857fdd7bd1629bb7&#34;&gt;3. Export the Private Key&lt;/h4&gt;

&lt;p&gt;Export and keep the private key in a secure location:&lt;/p&gt;

&lt;p&gt;[code] $ gpg &amp;ndash;export-secret-keys &amp;ndash;armor &amp;ndash;output private-key.sec [/code]&lt;/p&gt;

&lt;h4 id=&#34;4-export-the-public-key:a55d05ad15c95240857fdd7bd1629bb7&#34;&gt;4. Export the Public Key&lt;/h4&gt;

&lt;p&gt;Export the public key:&lt;/p&gt;

&lt;p&gt;[code] $ gpg &amp;ndash;export &amp;ndash;armor &amp;ndash;output public-key.asc [/code]&lt;/p&gt;

&lt;h4 id=&#34;5-send-the-public-key-to-a-server:a55d05ad15c95240857fdd7bd1629bb7&#34;&gt;5. Send the Public Key to a Server&lt;/h4&gt;

&lt;p&gt;Send the public key to a preferred key server (pgp.mit.edu, pgpkeys.telering.at, pgp.surfnet.nl, etc):&lt;/p&gt;

&lt;p&gt;[code] $ gpg &amp;ndash;keyserver SERVER-HOST &amp;ndash;send-keys KEY-ID [/code]&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;[1] &lt;a href=&#34;http://www.apache.org/dev/release-signing.html&#34;&gt;http://www.apache.org/dev/release-signing.html&lt;/a&gt;
[2] &lt;a href=&#34;http://www.pgpi.org/doc/pgpintro/&#34;&gt;http://www.pgpi.org/doc/pgpintro/&lt;/a&gt;
[3] &lt;a href=&#34;http://www.apache.org/dev/openpgp.html&#34;&gt;http://www.apache.org/dev/openpgp.html&lt;/a&gt;
[4] &lt;a href=&#34;http://people.apache.org/~henkp/trust/&#34;&gt;http://people.apache.org/~henkp/trust/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>